================================
How to Use 0-add_integer.py
================================

This module defines a function named ``add_integer(a, b=98)`` that adds two integers and returns the result.

Usage
=====

The function takes two arguments, ``a`` and ``b``, and performs integer addition. If ``b`` is not provided, it defaults to 98.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(5, 3)
    8

::

    >>> add_integer(-10, 20)
    10

::

    >>> add_integer(7)
    105  # Default value for b (98) is added to a (7)

::

    >>> add_integer(15, -5)
    10

::

    >>> add_integer(3.5, 2.5)
    6

Invalid Inputs
===============

Ensure that both ``a`` and ``b`` are either integers or floats; otherwise, a TypeError is raised.

::

    >>> add_integer("hello", 5)
    Traceback (most recent call last):
    TypeError: a must be an integer or b must be an integer

::

    >>> add_integer(10, "world")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(4.7, 3)
    Traceback (most recent call last):
    TypeError: a must be an integer or b must be an integer

::

    >>> add_integer(2, 3.14)
    Traceback (most recent call last):
    TypeError: b must be an integer

Combining Examples
==================

::

    >>> add_integer(8, 12)
    20

::

    >>> add_integer(0, 0)
    98  # Default value for b (98) is added to a (0)

::

    >>> add_integer(-15, -5)
    -20

The function seamlessly handles various scenarios of integer addition, providing flexibility with default values and raising errors for invalid input types.
